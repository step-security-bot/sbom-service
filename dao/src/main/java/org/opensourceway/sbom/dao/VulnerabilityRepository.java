package org.opensourceway.sbom.dao;

import org.opensourceway.sbom.model.entity.Vulnerability;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.Optional;
import java.util.UUID;

public interface VulnerabilityRepository extends JpaRepository<Vulnerability, UUID> {

    Optional<Vulnerability> findByVulId(String vulId);

    @Query(value = """
            WITH all_vul AS (
            SELECT v.* FROM external_vul_ref evf join vulnerability v on evf.vul_id = v.id
            WHERE (CAST(:packageId AS UUID) IS NULL AND evf.pkg_id IN (
                SELECT id FROM package WHERE sbom_id = (
                    SELECT id FROM sbom WHERE product_id = (
                        SELECT id FROM product WHERE name = :productName))))
            OR (CAST(:packageId AS UUID) IS NOT NULL AND evf.pkg_id = CAST(:packageId AS UUID))
            ), oss_index AS (
            SELECT * FROM all_vul WHERE source = 'OSS_INDEX'
            ), cve_manager_dup AS (
            SELECT * FROM all_vul WHERE source = 'CVE_MANAGER' AND vul_id in (SELECT vul_id FROM oss_index)
            ), uni_vul AS (
            SELECT *, coalesce(
            (SELECT vs.severity FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS3'),
            (SELECT vs.severity FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS2'),
            'UNKNOWN'
            ) severity, coalesce(
            (SELECT vs.score FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS3'),
            (SELECT vs.score FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS2')
            ) score, coalesce(
            (SELECT vs.scoring_system FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS3'),
            (SELECT vs.scoring_system FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS2')
            ) scoring_system FROM all_vul v WHERE id NOT IN (SELECT id FROM cve_manager_dup)
            )
            SELECT DISTINCT(id), * FROM uni_vul uv WHERE (:severity IS NULL OR uv.severity = :severity)
            AND (:vulId IS NULL OR uv.vul_id = :vulId)
            ORDER BY uv.score DESC NULLS LAST, uv.vul_id DESC, uv.scoring_system DESC NULLS LAST
            """,
            countQuery = """
                    WITH all_vul AS (
                    SELECT v.* FROM external_vul_ref evf join vulnerability v on evf.vul_id = v.id
                    WHERE (CAST(:packageId AS UUID) IS NULL AND evf.pkg_id IN (
                        SELECT id FROM package WHERE sbom_id = (
                            SELECT id FROM sbom WHERE product_id = (
                                SELECT id FROM product WHERE name = :productName))))
                    OR (CAST(:packageId AS UUID) IS NOT NULL AND evf.pkg_id = CAST(:packageId AS UUID))
                    ), oss_index AS (
                    SELECT * FROM all_vul WHERE source = 'OSS_INDEX'
                    ), cve_manager_dup AS (
                    SELECT * FROM all_vul WHERE source = 'CVE_MANAGER' AND vul_id in (SELECT vul_id FROM oss_index)
                    ), uni_vul AS (
                    SELECT *, coalesce(
                    (SELECT vs.severity FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS3'),
                    (SELECT vs.severity FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS2'),
                    'UNKNOWN'
                    ) severity, coalesce(
                    (SELECT vs.score FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS3'),
                    (SELECT vs.score FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS2')
                    ) score, coalesce(
                    (SELECT vs.scoring_system FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS3'),
                    (SELECT vs.scoring_system FROM vul_score vs WHERE vs.vul_id = v.id AND vs.scoring_system = 'CVSS2')
                    ) scoring_system FROM all_vul v WHERE id NOT IN (SELECT id FROM cve_manager_dup)
                    )
                    SELECT COUNT(DISTINCT(id)) FROM uni_vul uv WHERE (:severity IS NULL OR uv.severity = :severity)
                    AND (:vulId IS NULL OR uv.vul_id = :vulId)
                    """,
            nativeQuery = true)
    Page<Vulnerability> findByProductNameAndPackageIdAndSeverityAndVulId(@Param("productName") String productName,
                                                                         @Param("packageId") UUID packageId,
                                                                         @Param("severity") String severity,
                                                                         @Param("vulId") String vulId,
                                                                         Pageable pageable);

}